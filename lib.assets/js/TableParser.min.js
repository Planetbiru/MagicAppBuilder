class TableParser{constructor(e){this.tableInfo=[],this.init(),e&&this.parseAll(e)}init(){this.typeList="timestamptz,timestamp,serial4,bigserial,int2,int4,int8,tinyint,bigint,text,nvarchar,varchar,enum,set,numeric,decimal,char,real,float,integer,int,datetime,date,double,boolean,bool".split(",")}inArray(e,t){return e.includes(t)}isPrimaryKey(e){let t=e.toUpperCase().replace(/\s+/g," ").trim();return t.includes("PRIMARY KEY")}isAutoIncrement(e){let t=e.toUpperCase().replace(/\s+/g," ").trim();return t.includes("AUTO_INCREMENT")}parseTable(e){e=e.split(";")[0];let t=/(\w+\s+key.*|\w+\s+bigserial|\w+\s+serial4|\w+\s+tinyint.*|\w+\s+bigint.*|\w+\s+text.*|\w+\s+nvarchar.*|\w+\s+varchar.*|\w+\s+char.*|\w+\s+real.*|\w+\s+float.*|\w+\s+integer.*|\w+\s+int.*|\w+\s+datetime.*|\w+\s+date.*|\w+\s+double.*|\w+\s+bigserial.*|\w+\s+serial.*|\w+\s+timestamp.*|\w+\s+timestamptz.*|\w+\s+boolean.*|\w+\s+bool.*|\w+\s+enum\s*\(.*\)|\w+\s+enum\s*\(.*\)|\w+\s+set\s*\(.*\)|\w+\s+decimal\s*\(.*\)|\w+\s+numeric\s*\(.*\))/gim,s=/(?<fname>\w+)\s+(?<ftype>\w+)(?<fattr>.*)/gi,i=/enum\s*\(([^)]+)\)/i,l=/not\s+null/i,r=/primary\s+key/i,a=/default\s+(.+)/i,n=/(PRIMARY|UNIQUE) KEY[a-zA-Z_0-9\s]+\(([a-zA-Z_0-9,\s]+)\)/gi,u=/(create\s+table\s+if\s+not\s+exists|create\s+table)\s(?<tb>.*)\s\(/gim.exec(e),m=u.groups.tb,c=[],o=null,p=[],w=[];for(;null!=(u=t.exec(e));){let h=u[0],g=h;s.lastIndex=0;let b=s.exec(h),d=b[2],f=!1;if(i.test(d)){let y;d=`VARCHAR(${Math.max(...i.exec(d)[1].split(",").map(e=>e.trim().replace(/['"]/g,"")).map(e=>e.length))+2})`}if(this.isValidType(d.toString())){let A=b.groups.fattr.replace(",","").trim(),x=!l.test(A),I=A.replace(l,"");f=r.test(I)||this.isPrimaryKey(g);let $=this.isAutoIncrement(g),L=a.exec(I),C=null;L&&L.length>0?(L=L[1].trim()).toLowerCase().includes("comment")&&(C=L.substring(L.indexOf("comment"))):L=null;let K=this.getLength(A),R=b.groups.fname.trim();f&&w.push(R),this.inArray(p,R)||(c.push({Field:R,Type:d.trim(),Length:K,Key:f,Nullable:x,Default:L,AutoIncrement:$}),p.push(R))}else if(u[1].toLowerCase().includes("primary")&&u[1].toLowerCase().includes("key")){let T=u[1],_=/\((.*)\)/,E=T.match(_);null==o&&(o=E?E[1]:null)}if(null!=o)for(let N in o=o.split("(").join("").split(")").join(""),c)c[N].Field==o&&(c[N].Key=!0);if(n.test(h)&&r.test(h)){let P=h.replace(h.match(r)[0],""),U=(P=P.replace("(","").replace(")","")).split(",").map(e=>e.trim());for(let v in c)this.inArray(U,c[v].Field)&&(c[v].Key=!0)}}return null==o&&(o=w[0]),{tableName:m,columns:c,primaryKey:o}}getLength(e){if(e.includes("(")&&e.includes(")")){let t=e.match(/\((.*)\)/);return t?t[1]:""}return""}isValidType(e){return this.typeList.includes(e.toLowerCase())}parseAll(e){let t=[],s,i=/(create\s+table\s+if\s+not\s+exists|create\s+table)\s(?<tb>.*)\s\(/gi;for(;null!=(s=i.exec(e));){let l=e.substring(s.index),r=this.parseTable(l);t.push(r)}this.tableInfo=t}getResult(){return this.tableInfo}}
class TableParser{constructor(e){this.tableInfo=[],this.init(),e&&this.parseAll(e)}init(){this.typeList="TIMESTAMPTZ,TIMESTAMP,SERIAL4,BIGSERIAL,INT2,INT4,INT8,TINYINT,BIGINT,LONGTEXT,TEXT,NVARCHAR,VARCHAR,ENUM,SET,NUMERIC,DECIMAL,CHAR,REAL,FLOAT,INTEGER,INT,DATETIME,DATE,DOUBLE,BOOLEAN,BOOL".split(",")}inArray(e,t){return e.includes(t)}isPrimaryKey(e){let t=e.toUpperCase().replace(/\s+/g," ").trim();return t.includes("PRIMARY KEY")}isAutoIncrement(e){let t=e.toUpperCase().replace(/\s+/g," ").trim(),s=!1;return(s=t.includes("AUTO_INCREMENT"))||(s=t.includes("SERIAL")||t.includes("BIGSERIAL")||t.includes("NEXTVAL")),s}parseTable(e){let t=/(\w+\s+key.*|\w+\s+bigserial|\w+\s+serial4|\w+\s+tinyint.*|\w+\s+bigint.*|\w+\s+longtext.*|\w+\s+text.*|\w+\s+nvarchar.*|\w+\s+varchar.*|\w+\s+char.*|\w+\s+real.*|\w+\s+float.*|\w+\s+integer.*|\w+\s+int.*|\w+\s+datetime.*|\w+\s+date.*|\w+\s+double.*|\w+\s+bigserial.*|\w+\s+serial.*|\w+\s+timestamp.*|\w+\s+timestamptz.*|\w+\s+boolean.*|\w+\s+bool.*|\w+\s+enum\s*\(.*\)|\w+\s+enum\s*\(.*\)|\w+\s+set\s*\(.*\)|\w+\s+decimal\s*\(.*\)|\w+\s+numeric\s*\(.*\))/gim,s=/(?<fname>\w+)\s+(?<ftype>\w+)(?<fattr>.*)/gi,i=/enum\s*\(([^)]+)\)/i,r=/set\s*\(([^)]+)\)/i,l=/not\s+null/i,n=/primary\s+key/i,a=/default\s+(.+)/i,u=/(PRIMARY|UNIQUE) KEY[a-zA-Z_0-9\s]+\(([a-zA-Z_0-9,\s]+)\)/gi,p=/(create\s+table\s+if\s+not\s+exists|create\s+table)\s(?<tb>.*)\s\(/gim.exec(e),m=p.groups.tb,c=[],h=null,o=[],g=[];for(;null!=(p=t.exec(e));){let w=p[0],T=w;s.lastIndex=0;let A=s.exec(w),I=A[0],E=A[2],y=E,d=!1,f=null,L=null;if(i.test(I)&&(L=(f=i.exec(I)[1]).split(",").map(e=>e.trim().replace(/['"]/g,""))),r.test(I)&&(L=(f=r.exec(I)[1]).split(",").map(e=>e.trim().replace(/['"]/g,""))),this.isValidType(E.toString())||this.isValidType(y.toString())){let b=A.groups.fattr.replace(",","").trim(),$=!l.test(b),N=b.replace(l,"");d=n.test(N)||this.isPrimaryKey(T);let _=this.isAutoIncrement(T),R=a.exec(N),C=null;R&&R.length>0?(R=R[1].trim()).toLowerCase().includes("comment")&&(C=R.substring(R.indexOf("comment"))):R=null;let x=this.getLength(b),M=A.groups.fname.trim();d&&g.push(M),this.inArray(o,M)||(c.push({Field:M,Type:E.trim(),Length:x,Key:d,Nullable:$,Default:R,AutoIncrement:_,EnumValues:L}),o.push(M))}else if(this.isPrimaryKey(T)){let S=p[1],K=/\((.*)\)/,O=S.match(K);null==h&&(h=O?O[1]:null)}if(null!=h)for(let U in h=h.split("(").join("").split(")").join(""),c)c[U].Field==h&&(c[U].Key=!0);if(u.test(w)&&n.test(w)){let P=w.replace(w.match(n)[0],""),V=(P=P.replace("(","").replace(")","")).split(",").map(e=>e.trim());for(let B in c)this.inArray(V,c[B].Field)&&(c[B].Key=!0)}}return null==h&&(h=g[0]),{tableName:m,columns:c,primaryKey:h}}getLength(e){if(e.includes("(")&&e.includes(")")){let t=e.match(/\((.*)\)/);return t?t[1]:""}return""}isValidType(e){return this.typeList.includes(e.toUpperCase())}parseAll(e){let t=[],s=this.parseSQL(e);for(let i in s){console.log(s[i].query);let r=this.parseTable(s[i].query);t.push(r)}this.tableInfo=t}parseSQL(e){let t=(e=(e=e.replace(/\n/g,"\r\n")).replace(/\r\r\n/g,"\r\n")).split("\r\n"),s=[];t.forEach(e=>{(e=e.trim()).startsWith("-- ")||"--"===e||""===e||s.push(e)});let i=0,r=0,l=1,n=-1,a=";",u=[],p=[];(t=s).forEach(e=>{""===e&&1===i&&(u[n]+="\r\n"),0===i&&(e.trim().startsWith("--")?(r=1,n++,l=1,i=0):r=0),0===r&&(1===l&&(u[++n]="",p[n]=a,l=0),u[n]+=e+"\r\n",p[n]=a,l=(e=e.trim()).length-a.length-1,e.substring(l).includes(a)||e===a?(n++,l=1,i=0):(l=0,i=1),p[n]=a,e.toLowerCase().startsWith("delimiter "))&&(a=(e=e.trim().replace(/\s+/g," ")).split(" ")[1],p[++n]=a,l=1,i=0)});let m=[];return u.forEach((e,t)=>{let s=p[t];e.toLowerCase().startsWith("delimiter ")||(e=(e=e.trim()).substring(0,e.length-s.length),m.push({query:e,delimiter:s}))}),m}getResult(){return this.tableInfo}}
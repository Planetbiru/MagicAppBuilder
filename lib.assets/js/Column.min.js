const DIALECT_TYPE_MAP={mysql:{int:"INT",bigint:"BIGINT",varchar:"VARCHAR",boolean:"TINYINT(1)",tinyint1:"TINYINT(1)",text:"TEXT",datetime:"DATETIME",timestamp:"TIMESTAMP",float:"FLOAT",double:"DOUBLE",decimal:"DOUBLE",enum:"ENUM",set:"SET"},postgresql:{int:"INTEGER",bigint:"BIGINT",varchar:"CHARACTER VARYING",boolean:"BOOLEAN",tinyint1:"BOOLEAN",text:"TEXT",datetime:"TIMESTAMP",timestamp:"TIMESTAMP",float:"REAL",double:"DOUBLE PRECISION",decimal:"NUMERIC",enum:"TEXT",set:"TEXT"},sqlite:{int:"INTEGER",bigint:"INTEGER",varchar:"NVARCHAR",boolean:"BOOLEAN",tinyint1:"BOOLEAN",text:"TEXT",datetime:"DATETIME",timestamp:"TIMESTAMP",float:"REAL",double:"REAL",decimal:"REAL",enum:"TEXT",set:"TEXT"},sqlserver:{int:"INT",bigint:"BIGINT",varchar:"NVARCHAR",boolean:"BIT",tinyint1:"BIT",text:"NVARCHAR(MAX)",datetime:"DATETIME",timestamp:"DATETIME2",float:"FLOAT",double:"FLOAT",decimal:"DECIMAL",enum:"NVARCHAR",set:"NVARCHAR"}};class Column{constructor(e,t="VARCHAR",s="",i=!1,l="",a=!1,r=!1,n="",T=""){-1!==t.toUpperCase().indexOf("BIGINT")&&(null==s||0==s||""==s)&&(s="20"),this.name=e,this.type=t,this.length=s,this.nullable=i,this.default=l,this.primaryKey=a,this.autoIncrement=r,this.values=n,this.description=T}fixColumnType(e){if(!e)return"";let t=e.match(/^(\w+)\s*\((\d+)\)$/i);if(t){let s=t[1].toUpperCase();if("BOOLEAN"===s||"BOOL"===s||"BIT"===s)return s}return e.toUpperCase()}toSQL(e="mysql",t=!1){let s=this.type.toUpperCase();"TINYINT"===s&&1==this.length&&(s="TINYINT1");let i=DIALECT_TYPE_MAP[e]||DIALECT_TYPE_MAP.mysql,l=i[s.toLowerCase()]||this.type;"BIGINT"===(l=this.fixColumnType(l).toUpperCase())&&"mysql"===e&&(this.length="20");let a=["ENUM","SET"].includes(s),r=["NUMERIC","DECIMAL","DOUBLE","FLOAT"].includes(s),n=["VARCHAR","CHAR","BINARY","VARBINARY","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","BIGINT"].includes(s),T=`${this.name} ${l}`;if(a&&this.values){let o=this.values.split(",").map(e=>`'${e.trim()}'`).join(", ");"mysql"===e&&(T=`${this.name} ${l}(${o})`)}else if(r&&this.values){let u=this.values.split(",").map(e=>e.trim()).filter(e=>/^\d+$/.test(e)).join(", ");u&&(T+=`(${u})`)}else n&&this.length&&("sqlite"===e&&this.primaryKey&&this.autoIncrement&&s.includes("INT")?T+="":T+=`(${this.length})`);return this.primaryKey?t?T+=" NOT NULL":T+=" NOT NULL PRIMARY KEY":T+=this.nullable?" NULL":" NOT NULL",this.autoIncrement&&("mysql"===e?T+=" AUTO_INCREMENT":"postgresql"===e?T=`${this.name} SERIAL`:"sqlite"===e?T+=" AUTOINCREMENT":"sqlserver"===e&&(T+=" IDENTITY(1,1)")),this.hasDefault()&&(this.isTypeBoolean(this.type,this.length)?T+=` DEFAULT ${this.toBoolean(this.default,e)}`:i&&this.isTypeNumeric(this.type,Object.values(i))&&!isNaN(this.default)?T+=` DEFAULT ${this.default}`:isNaN(this.default)?T+="":T+=` DEFAULT ${this.fixDefaultColumnValue(this.default,e)}`),T}toNumeric(e){let t=e;return""==(t=(t=t.replace(/^"(.*)"$/,"$1")).replace(/^'(.*)'$/,"$1"))?"0":t}isTypeNumeric(e,t){return t.includes(e.toUpperCase())}fixDefaultColumnValue(e,t){return e?-1!=e.toUpperCase().indexOf("NULL")?e="NULL":this.isNumber(e)?e="'"+e.toString()+"'":/^(CURRENT_TIMESTAMP|NOW\(\))$/i.test(e)?e=e.toUpperCase():e.startsWith("'")&&e.endsWith("'")&&/\d{4}-\d{2}-\d{2}/.test(e.slice(1,-1))?e="'"+e.slice(1,-1)+"'":/\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}/.test(e)?e="'"+e+"'":/\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d{6}/.test(e)?e="'"+e+"'":/^(TRUE|FALSE)$/i.test(e)?e=e.toUpperCase():/^CURRENT_TIMESTAMP\s+ON\s+UPDATE\s+CURRENT_TIMESTAMP$/i.test(e)?e=e.toUpperCase():/^CURRENT_TIMESTAMP\s+ON\s+INSERT\s+CURRENT_TIMESTAMP$/i.test(e)?e=e.toUpperCase():this.isInQuotes(e)&&(e="'"+e.slice(1,-1)+"'"):e=null,e}isInQuotes(e){return e.startsWith("'")&&e.endsWith("'")}isNumber(e){return!isNaN(e)&&""!==e}toBoolean(e,t){let s="string"==typeof e?e.trim().toLowerCase():String(e).toLowerCase(),i="true"===s||"1"===s||0!==parseInt(s),l=["sqlite","sqlserver"].includes(t.toLowerCase());return l?i?"1":"0":i?"TRUE":"FALSE"}fixDefaultValue(e,t,s){let i=e;return this.isTypeBoolean(t,s)?i=0!=e&&"true"===e.toString().toLowerCase()?"true":"false":this.isNativeValue(e)?i=e:this.isTypeText(t)?i=`'${e.replace(/'/g,"\\'")}'`:this.isTypeInteger(t)?i=parseInt(e.replace(/[^\d]/g,""),10):this.isTypeFloat(t)&&(i=parseFloat(e.replace(/[^\d.]/g,""))),i}isTypeBoolean(e,t){return"boolean"===e.toLowerCase()||"bool"===e.toLowerCase()||"bit"===e.toLowerCase()||"tinyint"===e.toLowerCase()&&1==t}isNativeValue(e){return"true"===e.toLowerCase()||"false"===e.toLowerCase()||"null"===e.toLowerCase()}isTypeText(e){return["char","varchar","text","tinytext","mediumtext","longtext","enum","set"].includes(e.toLowerCase())}isTypeInteger(e){return["tinyint","smallint","mediumint","int","bigint","integer"].includes(e.toLowerCase())}isTypeFloat(e){return["float","double","decimal","numeric"].includes(e.toLowerCase())}isTypeDate(e){return["date","datetime","timestamp","time","year"].includes(e.toLowerCase())}isTypeBinary(e){return["blob","tinyblob","mediumblob","longblob"].includes(e.toLowerCase())}hasRange(e){return e.includes(this.type)&&this.values}hasValue(e){return e.includes(this.type)&&this.values}hasLength(e){return this.length&&e.includes(this.type)}hasDefault(){return this.default&&"null"!==this.default.toLowerCase()}}
class GraphQLSchemaUtils{static reservedTypes=["String","Int","Float","Boolean","ID"];static toSnakeCase(e){return e.replace(/([A-Z])/g,(e,t,a)=>(a>0?"_":"")+t.toLowerCase())}static toCamelCase(e){return e.replace(/_([a-z])/g,(e,t)=>t.toUpperCase())}static normalizeNameForComparison(e){return e.replace(/[_\s]/g,"").toLowerCase()}static normalizeEntity(e,t="snake"){let a={};for(let[s,r]of Object.entries(e)){let i=s;"snake"===t?i.includes("_")||(i=this.toSnakeCase(i)):"camel"===t&&i.includes("_")&&(i=this.toCamelCase(i)),a[i]=r.map(a=>{let{name:s,type:r,nullable:i}=a;if(!this.reservedTypes.includes(r)){let n=r;/id$/i.test(s)||(s=this.normalizeNameForComparison(s)===this.normalizeNameForComparison(n)?s+"Id":s);let l=e[n];if(l){let o=l.find(e=>this.normalizeNameForComparison(e.name)===this.normalizeNameForComparison(s));o&&(r=o.type)}}let m=s.includes("_");return"camel"===t?m&&(s=this.toCamelCase(s)):"snake"===t&&!m&&/[a-z][A-Z]/.test(s)&&(s=this.toSnakeCase(s)),"ID"===r&&(r="String"),{name:s,type:r,nullable:i}})}return a}static parseGraphQLSchema(e){let t={types:{},inputs:{}},a=/(type|input)\s+(\w+)\s*\{([\s\S]*?)\}/g,s;for(;null!==(s=a.exec(e));){let r=s[1],i=s[2],n=s[3],l=[],o=/(\w+):\s*([\w!]+)/g,m;for(;null!==(m=o.exec(n));){let p=m[1],c=m[2],u=c.endsWith("!");u&&(c=c.slice(0,-1)),l.push({name:p,type:c,nullable:!u})}"type"===r?t.types[i]=l:t.inputs[i]=l}return t}}
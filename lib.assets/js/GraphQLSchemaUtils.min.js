class GraphQLSchemaUtils{static reservedTypes=["String","Int","Float","Boolean","ID"];static toSnakeCase(e){return e.replace(/([A-Z])/g,(e,t,a)=>(a>0?"_":"")+t.toLowerCase())}static toCamelCase(e){return e.replace(/_([a-z])/g,(e,t)=>t.toUpperCase())}static normalizeNameForComparison(e){return e.replace(/[_\s]/g,"").toLowerCase()}static normalizeEntity(e,t="snake"){let a={};for(let[n,r]of Object.entries(e)){let l=n;"snake"===t?l.includes("_")||(l=this.toSnakeCase(l)):"camel"===t&&l.includes("_")&&(l=this.toCamelCase(l)),a[l]=r.map(a=>{let{name:n,type:r,nullable:l}=a;if(!this.reservedTypes.includes(r)){let i=r;/id$/i.test(n)||(n=this.normalizeNameForComparison(n)===this.normalizeNameForComparison(i)?n+"Id":n);let s=e[i];if(s){let o=s.find(e=>this.normalizeNameForComparison(e.name)===this.normalizeNameForComparison(n));o&&(r=o.type)}}let m=n.includes("_");return"camel"===t?m&&(n=this.toCamelCase(n)):"snake"===t&&!m&&/[a-z][A-Z]/.test(n)&&(n=this.toSnakeCase(n)),"ID"===r&&(r="String"),{name:n,type:r,nullable:l}})}return a}static parseGraphQLSchema(e){let t={types:{},inputs:{}},a=/(type|input)\s+(\w+)\s*\{([\s\S]*?)\}/g,n;for(;null!==(n=a.exec(e));){let r=n[1],l=n[2],i=n[3];if("Query"===l)continue;let s=[],o=/(\w+):\s*([\w!]+)/g,m;for(;null!==(m=o.exec(i));){let p=m[1],c=m[2],u=c.endsWith("!");u&&(c=c.slice(0,-1)),s.push({name:p,type:c,nullable:!u})}"type"===r?t.types[l]=s:"input"===r&&(t.inputs[l]=s)}return t}static buildGraphQLSchema(e,t=!0){let a={CHAR:"String",VARCHAR:"String",TEXT:"String",LONGTEXT:"String",INT:"Int",INTEGER:"Int",BIGINT:"Int",SMALLINT:"Int",TINYINT:"Boolean",DECIMAL:"Float",NUMERIC:"Float",FLOAT:"Float",DOUBLE:"Float",REAL:"Float",BOOLEAN:"Boolean",DATE:"String",DATETIME:"String",TIMESTAMP:"String",TIME:"String",ENUM:"String",SET:"String"},n=e=>e.replace(/_([a-z])/g,(e,t)=>t.toUpperCase()),r=e=>{let t=n(e);return t.charAt(0).toUpperCase()+t.slice(1)},l=`# GraphQL Schema generated by MagicAppBuilder

`;return e.forEach(i=>{l+=`type ${r(i.name)} {
`;let s=i.columns.filter(e=>e.primaryKey),o=s.length>1;i.columns.forEach(s=>{let m=!1,p=!1;if(m&&!s.nullable&&(p=!0),o&&s.primaryKey&&(p=!0),s.primaryKey&&(p=!0),s.primaryKey||m||s.nullable||(p=!0),s.name.endsWith("_id")){let c=s.name.slice(0,-3),u=e.find(e=>e.name.toLowerCase()===c.toLowerCase());if(u&&u.name.toLowerCase()!==i.name.toLowerCase()){let y=r(u.name),C=n(u.name);l+=`    ${C}: ${y}${s.nullable?"":"!"}
`,m=!0}}if(!(t&&m)){let h;h=s.primaryKey?"ID":a[s.type.toUpperCase()]||"String",p&&(h+="!"),l+=`    ${n(s.name)}: ${h}
`}}),l+=`}

`}),e.forEach(t=>{l+=`input ${r(t.name)+"Input"} {
`;let i=t.columns.filter(e=>e.primaryKey),s=i.length>1;t.columns.forEach(r=>{let i=r.name.endsWith("_id")&&e.some(e=>e.name.toLowerCase()===r.name.slice(0,-3).toLowerCase()&&e.name.toLowerCase()!==t.name.toLowerCase()),o;o=r.primaryKey||i?"ID":a[r.type.toUpperCase()]||"String";let m=s&&r.primaryKey||i&&!r.nullable||!r.primaryKey&&!i&&!r.nullable;m&&(o+="!"),l+=`    ${n(r.name)}: ${o}
`}),l+=`}

`}),l+=`type Query {
`,e.forEach(e=>{let t=r(e.name),a=n(e.name),i=e.columns.filter(e=>e.primaryKey);if(i.length>0){let s=i.map(e=>{let t=n(e.name);return`${t}: ID!`}).join(", "),o=`get${t}`;l+=`    ${o}(${s}): ${t}
`}let m=`${a}s`,p=`getAll${r(m)}`;l+=`    ${p}: [${t}]
`}),l+=`}
`}}